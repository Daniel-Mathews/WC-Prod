version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_JUTE_MAXBUFFER: 4194304
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "stat, ruok, conf, isro"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_network



  kafka-connect:
    build: 
      context: ./kafka-connect
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: /kafka/connect/plugins
    depends_on:
      - kafka
      - authdb
      - maindb
    networks:
      - app_network

  connector-registrar:
    build: ./connector-registrar
    volumes:
      - ./connectors:/connectors
    depends_on:
      - kafka-connect
    networks:
      - app_network

  authdb:
    build: ./authDB
    container_name: authDB
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: daniel
      POSTGRES_DB: authDB
    ports:
      - "5433:5432"
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=10", "-c", "max_wal_senders=10"]
    networks:
      - app_network

  maindb:
    build: ./mainDB
    container_name: mainDB
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: daniel
      POSTGRES_DB: mainDB
    ports:
      - "5434:5432"
    networks:
      - app_network

  
  authserver:
    build: ./authServer
    container_name: authServer
    restart: always
    depends_on:
      - authdb
    environment:
      DATABASE_URL: "postgresql://postgres:daniel@authDB:5432/authDB"
    ports:
      - "8001:8000"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge